{
  "info": {
    "name": "Expense Tracker API",
    "description": "Complete API collection for the Expense Tracker application",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
    "version": "1.0.0"
  },
  "auth": {
    "type": "bearer",
    "bearer": [
      {
        "key": "token",
        "value": "{{accessToken}}",
        "type": "string"
      }
    ]
  },
  "variable": [
    {
      "key": "baseUrl",
      "value": "http://localhost:3001/api",
      "type": "string"
    },
    {
      "key": "accessToken",
      "value": "",
      "type": "string"
    },
    {
      "key": "refreshToken",
      "value": "",
      "type": "string"
    },
    {
      "key": "userId",
      "value": "",
      "type": "string"
    },
    {
      "key": "expenseId",
      "value": "",
      "type": "string"
    }
  ],
  "item": [
    {
      "name": "Authentication",
      "item": [
        {
          "name": "Register User",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 201) {",
                  "    const response = pm.response.json();",
                  "    pm.collectionVariables.set('accessToken', response.tokens.accessToken);",
                  "    pm.collectionVariables.set('refreshToken', response.tokens.refreshToken);",
                  "    pm.collectionVariables.set('userId', response.user.id);",
                  "    pm.test('Registration successful', () => {",
                  "        pm.expect(response.message).to.eql('User registered successfully');",
                  "        pm.expect(response.user.email).to.exist;",
                  "        pm.expect(response.tokens.accessToken).to.exist;",
                  "    });",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"john@example.com\",\n  \"username\": \"johndoe\",\n  \"password\": \"SecurePass123\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/auth/register",
              "host": ["{{baseUrl}}"],
              "path": ["auth", "register"]
            }
          }
        },
        {
          "name": "Login User",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 200) {",
                  "    const response = pm.response.json();",
                  "    pm.collectionVariables.set('accessToken', response.tokens.accessToken);",
                  "    pm.collectionVariables.set('refreshToken', response.tokens.refreshToken);",
                  "    pm.collectionVariables.set('userId', response.user.id);",
                  "    pm.test('Login successful', () => {",
                  "        pm.expect(response.message).to.eql('Login successful');",
                  "    });",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"emailOrUsername\": \"john@example.com\",\n  \"password\": \"SecurePass123\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/auth/login",
              "host": ["{{baseUrl}}"],
              "path": ["auth", "login"]
            }
          }
        },
        {
          "name": "Get Current User",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/auth/me",
              "host": ["{{baseUrl}}"],
              "path": ["auth", "me"]
            }
          }
        },
        {
          "name": "Refresh Token",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 200) {",
                  "    const response = pm.response.json();",
                  "    pm.collectionVariables.set('accessToken', response.tokens.accessToken);",
                  "    pm.collectionVariables.set('refreshToken', response.tokens.refreshToken);",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"refreshToken\": \"{{refreshToken}}\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/auth/refresh",
              "host": ["{{baseUrl}}"],
              "path": ["auth", "refresh"]
            }
          }
        },
        {
          "name": "Logout",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"refreshToken\": \"{{refreshToken}}\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/auth/logout",
              "host": ["{{baseUrl}}"],
              "path": ["auth", "logout"]
            }
          }
        }
      ]
    },
    {
      "name": "Expenses",
      "item": [
        {
          "name": "Create Expense",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 201) {",
                  "    const response = pm.response.json();",
                  "    pm.collectionVariables.set('expenseId', response.expense.id);",
                  "    pm.test('Expense created successfully', () => {",
                  "        pm.expect(response.message).to.eql('Expense created successfully');",
                  "        pm.expect(response.expense.totalAmount).to.eql(27.60);",
                  "    });",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"description\": \"Lunch at restaurant\",\n  \"category\": \"FOOD\",\n  \"isRecurring\": false,\n  \"amount\": 25.50,\n  \"taxPercent\": 8.25,\n  \"date\": \"2023-12-01\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/expenses",
              "host": ["{{baseUrl}}"],
              "path": ["expenses"]
            }
          }
        },
        {
          "name": "Get All Expenses",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/expenses?page=1&limit=10",
              "host": ["{{baseUrl}}"],
              "path": ["expenses"],
              "query": [
                {
                  "key": "page",
                  "value": "1"
                },
                {
                  "key": "limit",
                  "value": "10"
                }
              ]
            }
          }
        },
        {
          "name": "Get Expenses with Filters",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/expenses?category=FOOD&dateFrom=2023-12-01&dateTo=2023-12-31&sortBy=amount&order=desc",
              "host": ["{{baseUrl}}"],
              "path": ["expenses"],
              "query": [
                {
                  "key": "category",
                  "value": "FOOD"
                },
                {
                  "key": "dateFrom",
                  "value": "2023-12-01"
                },
                {
                  "key": "dateTo",
                  "value": "2023-12-31"
                },
                {
                  "key": "sortBy",
                  "value": "amount"
                },
                {
                  "key": "order",
                  "value": "desc"
                }
              ]
            }
          }
        },
        {
          "name": "Search Expenses",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/expenses?q=restaurant",
              "host": ["{{baseUrl}}"],
              "path": ["expenses"],
              "query": [
                {
                  "key": "q",
                  "value": "restaurant"
                }
              ]
            }
          }
        },
        {
          "name": "Get Single Expense",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/expenses/{{expenseId}}",
              "host": ["{{baseUrl}}"],
              "path": ["expenses", "{{expenseId}}"]
            }
          }
        },
        {
          "name": "Update Expense",
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"description\": \"Updated lunch expense\",\n  \"category\": \"FOOD\",\n  \"isRecurring\": false,\n  \"amount\": 30.00,\n  \"taxPercent\": 8.25,\n  \"date\": \"2023-12-01\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/expenses/{{expenseId}}",
              "host": ["{{baseUrl}}"],
              "path": ["expenses", "{{expenseId}}"]
            }
          }
        },
        {
          "name": "Delete Expense",
          "request": {
            "method": "DELETE",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/expenses/{{expenseId}}",
              "host": ["{{baseUrl}}"],
              "path": ["expenses", "{{expenseId}}"]
            }
          }
        }
      ]
    },
    {
      "name": "System",
      "item": [
        {
          "name": "Health Check",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/health",
              "host": ["{{baseUrl}}"],
              "path": ["health"]
            }
          }
        }
      ]
    }
  ]
}
